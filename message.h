#include <openssl/des.h>

#include <inttypes.h>
#include <Winsock.h>
#include <WinSock2.h>

/* MESSAGE TYPE DEFINITIONS */

#define MSG_TYPE_RESERVED      0x00

#define MSG_TYPE_KRB_AS_REQ    0x01
#define MSG_TYPE_KRB_AS_RESP   0x02
#define MSG_TYPE_KRB_AS_ERR    0x03

#define MSG_TYPE_KRB_AP_REQ    0x04
#define MSG_TYPE_KRB_AP_RESP   0x05
#define MSG_TYPE_KRB_AP_ERR    0x06

#define MSG_TYPE_KRB_PRIVATE   0x07

#define MSG_TYPE_AP_DATA_REQ   0x08
#define MSG_TYPE_AP_DATA_PLD   0x09
#define MSG_TYPE_AP_TERMINATE  0x0A

#define NUM_MSG_TYPES          0x0B

/* DEFINITIONS FOR (MAXIMUM) MESSAGE FIELD SIZES */

#define SIZE_TICKET  104  /* Size of encrypted ticket struct (bytes)         */
#define SIZE_CRED    160  /* Size of encrypted credential struct (bytes)     */
#define SIZE_AUTH     48  /* Size of encrypted auth struct (bytes)           */
#define SIZE_NONCE     8  /* Size of encrypted nonce (timestamp) (bytes)     */
#define SIZE_PRV     984  /* Size of encrypted application data (bytes)      */
#define SIZE_DATA    976  /* Size of application specific data block (bytes) */
#define SIZE_SHA1     20  /* Size of the SHA-1 digest field (bytes)          */
#define SIZE_ID       40  /* Size of the client/server ID field (bytes)      */

typedef uint32_t time32_t;

//#pragma pack(push,1)

/* Authentication ticket generated by the Authentication Server (AS) */

typedef struct
{
	DES_cblock session_key;		/* Session key               */
	char client_id[SIZE_ID];	/* Client ID string          */
	struct in_addr client_ip;	/* IP address of the Client  */
	char server_id[SIZE_ID];	/* AP ID string              */
	time32_t timestamp;		/* Ticket creation time      */
	uint16_t lifetime;		/* Ticket lifetime (seconds) */
} krb_ticket_t;

/* Session key and other credentials info transmitted from the AS to the Client */

typedef struct
{
	DES_cblock session_key;		/* Session key             */
	char server_id[SIZE_ID];	/* AP ID string            */
	time32_t timestamp;		/* Ticket creation time    */
	uint16_t lifetime;		/* lifetime of session key */
	uint8_t ticket[SIZE_TICKET];	/* Encrypted ticket field  */
} krb_credential_t;

/* Authentication field used to authenticate the Client towards the Server */

typedef struct
{
	char client_id[SIZE_ID];	/* Client ID string         */
	struct in_addr client_ipadd;	/* IP address of the client */
	time32_t timestamp;		/* Timestamp used as nonce  */
} krb_auth_t;

/* Message used by the Client to request a session key from the AS */

typedef struct
{
	uint16_t type;			/* Type of the message (0x01) */
	char client_id[SIZE_ID];	/* ID string of the Client    */
	char server_id[SIZE_ID];	/* ID string of the Server    */
	time32_t timestamp;		/* Timestamp for the request  */
} MSG_KRB_AS_REQ;

/* Reply message from the AS with credential information */

typedef struct
{
	uint16_t type;			/* Type of the message (0x02) */
    uint8_t cred[SIZE_CRED];	/* Encrypted credentials data */
} MSG_KRB_AS_RESP;

/* Reply message sent by the AS if client ID or server ID is invalid */

typedef struct
{
	uint16_t type;			/* Type of the message (0x03) */
	char client_id[SIZE_ID];	/* String of the erroneous ID */
} MSG_KRB_AS_ERR;

/* Message sent by the Client to the AP (contains ticket and authenticator) */

typedef struct
{
	uint16_t type;			/* Type of the message (0x04) */
	uint8_t ticket[SIZE_TICKET];	/* Encrypted ticket field     */
	uint8_t auth[SIZE_AUTH];	/* Encrypted auth field       */
} MSG_KRB_AP_REQ;

/* Message from the AP containing the timestamp+1 value as a nonce */

typedef struct
{
	uint16_t type;			/* Type of the message (0x05)  */
	uint8_t nonce[SIZE_NONCE];	/* Encrypted nonce data        */
} MSG_KRB_AP_RESP;

/* Sent by the AP if ID or IP address in AUTH do not match those of the Ticket */

typedef struct
{
	uint16_t type;			/* Type of the message (0x06) */
	char client_id[SIZE_ID];	/* ID string of the Client    */
} MSG_KRB_AP_ERR;

/* Message used to encapsulate and send encrypted application data */

typedef struct
{
	uint16_t type;			/* Type of the message (0x07)   */
	uint16_t length;		/* Length of the encrypted data */
	uint8_t data[SIZE_PRV];		/* Field for the encrypted data */
} MSG_KRB_PRIVATE;

/* The following messages are carried encrypted inside the KRB_PRIVATE message */

/* Message used by the Client to request a file from the Server */

typedef struct
{
	uint16_t type;			/* Type of the message (0x08) */
} MSG_AP_DATA_REQ;

/* Message used to carry one chunck of file data */

typedef struct
{
	uint16_t type;			/* Type of the message (0x09) */
	uint16_t length;		/* Length of the data field   */
	uint32_t sequence;		/* Sequence number value      */
	uint8_t data[SIZE_DATA];	/* Chunk of plaintext data    */
} MSG_AP_DATA_PLD;

/* Message used to terminate the data transfer and to carry the SHA-1 hash */

typedef struct
{
	uint16_t type;			/* Type of the message (0x0A)  */
	uint8_t digest[SIZE_SHA1];	/* Container for the SHA1 hash */
} MSG_AP_TERMINATE;

//#pragma pack(pop)
